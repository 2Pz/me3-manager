"""
TOML profile writer for ME3 Manager.
Handles writing profile files with clean array of tables syntax using tomlkit.
"""

import logging
from pathlib import Path
from typing import Any, Dict, List, Optional

import tomlkit
from tomlkit.items import Array

log = logging.getLogger(__name__)


class TomlProfileWriter:
    """Handles writing TOML profile files with clean formatting using tomlkit."""

    @staticmethod
    def _create_dependency_array(dependencies: List[Dict[str, Any]]) -> Optional[Array]:
        """
        Creates a tomlkit Array of inline tables for dependencies.
        This format is required by the ModEngine parser for both natives and packages.
        """
        if not dependencies:
            return None

        dep_array = tomlkit.array()
        for dep in dependencies:
            if isinstance(dep, dict) and dep.get("id"):
                inline_table = tomlkit.inline_table()
                inline_table["id"] = dep["id"]
                # Only add 'optional' if it's explicitly true to keep the TOML clean.
                if dep.get("optional") is True:
                    inline_table["optional"] = True
                else:
                    # Per the schema, optional is required. Default to false if not present or false.
                    inline_table["optional"] = False
                dep_array.append(inline_table)
            elif isinstance(dep, str):  # Legacy support for simple strings
                inline_table = tomlkit.inline_table()
                inline_table["id"] = dep
                inline_table["optional"] = False
                dep_array.append(inline_table)

        return dep_array

    @staticmethod
    def write_profile(
        profile_path: Path,
        config_data: Dict[str, Any],
        game_name: Optional[str] = None,
    ) -> None:
        """
        Write a ME3 profile file with clean array of tables syntax using tomlkit.

        Args:
            profile_path: Path to write the profile to
            config_data: Dictionary containing profile data
            game_name: Optional game name for context
        """
        # Create a new TOML document
        doc = tomlkit.document()

        # Add header comment
        doc.add(tomlkit.comment("Profile generated by ME3 Manager"))
        doc.add(tomlkit.nl())
        doc.add("profileVersion", config_data.get("profileVersion", "v1"))

        # Add optional global settings
        if "savefile" in config_data and config_data["savefile"]:
            doc.add("savefile", config_data["savefile"])

        if "start_online" in config_data:
            doc.add("start_online", config_data["start_online"])

        # Add natives section
        natives = config_data.get("natives", [])
        if natives:
            natives_aot = tomlkit.aot()

            for native in natives:
                if isinstance(native, dict):
                    native_table = tomlkit.table()

                    if "path" in native:
                        native_table["path"] = native["path"]
                    if native.get("optional"):
                        native_table["optional"] = True

                    if "load_before" in native:
                        dep_array = TomlProfileWriter._create_dependency_array(
                            native["load_before"]
                        )
                        if dep_array:
                            native_table["load_before"] = dep_array
                    if "load_after" in native:
                        dep_array = TomlProfileWriter._create_dependency_array(
                            native["load_after"]
                        )
                        if dep_array:
                            native_table["load_after"] = dep_array

                    if "initializer" in native and native["initializer"]:
                        native_table.add("initializer", native["initializer"])
                    if "finalizer" in native and native["finalizer"]:
                        native_table.add("finalizer", native["finalizer"])

                    natives_aot.append(native_table)

                elif isinstance(native, str):
                    native_table = tomlkit.table()
                    native_table["path"] = native
                    natives_aot.append(native_table)

            doc.add("natives", natives_aot)

        # Add packages section
        packages = config_data.get("packages", [])
        if packages:
            packages_aot = tomlkit.aot()

            for package in packages:
                if isinstance(package, dict):
                    package_table = tomlkit.table()

                    if "id" in package:
                        package_table["id"] = package["id"]
                    if "path" in package:
                        package_table["path"] = package["path"]
                    elif "source" in package:  # Legacy support
                        package_table["path"] = package["source"]

                    if "load_before" in package:
                        dep_array = TomlProfileWriter._create_dependency_array(
                            package["load_before"]
                        )
                        if dep_array:
                            package_table["load_before"] = dep_array
                    if "load_after" in package:
                        dep_array = TomlProfileWriter._create_dependency_array(
                            package["load_after"]
                        )
                        if dep_array:
                            package_table["load_after"] = dep_array

                    packages_aot.append(package_table)

            doc.add("packages", packages_aot)

        # Write to file
        with open(profile_path, "w", encoding="utf-8") as f:
            f.write(tomlkit.dumps(doc))

    @staticmethod
    def format_inline_to_aot(content: str) -> str:
        """
        Convert inline array syntax to array of tables syntax.
        This is a utility method for migrating existing profiles.

        Args:
            content: TOML content with inline arrays

        Returns:
            TOML content with array of tables
        """
        try:
            import tomllib

            # Parse the existing content
            config_data = tomllib.loads(content)

            # Use our writer to create the new format
            import tempfile

            with tempfile.NamedTemporaryFile(
                mode="w", suffix=".me3", delete=False
            ) as tmp:
                tmp_path = Path(tmp.name)

            try:
                TomlProfileWriter.write_profile(tmp_path, config_data)
                with open(tmp_path, "r", encoding="utf-8") as f:
                    result = f.read()
                return result
            finally:
                tmp_path.unlink(missing_ok=True)

        except Exception as e:
            log.error("Error converting TOML format: %s", e)
            return content  # Return original if conversion fails
