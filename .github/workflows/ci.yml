name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  # Allow manual trigger
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  checks:
    # Call the checks workflow in this repo
    uses: ./.github/workflows/checks.yml
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    # Wait for checks to pass before building
    needs: checks
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: ".python-version"
      - uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v6.6.1
      - name: Install dependencies
        run: uv sync --locked --dev
      - name: Get me3-manager version from pyproject.toml
        run: echo "version=$(uv version --short)" >> "$GITHUB_ENV"
      - name: Build Linux with pyinstaller
        run: uv run ./build-linux.sh
      - name: Package as AppImage
        run: ./package-linux.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: me3-manager-linux
          # Since Linux build is a single file, we just zip the file without a
          # containing folder.
          path: dist/linux-${{ env.version }}/Me3_Manager.AppImage
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    # Wait for checks to pass before building
    needs: checks
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: ".python-version"
      - uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v6.6.1
      - name: Install dependencies
        run: uv sync --locked --dev
      - name: Get me3-manager version from pyproject.toml
        # Note the PowerShell syntax for env vars
        run: echo "version=$(uv version --short)" >> $env:GITHUB_ENV
      - name: Build Windows with cx_Freeze
        run: uv run ./build-windows.py build
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: me3-manager-windows
          # Windows exe and supporting files are under "dist/windows-$version/Me3_Manager_$version/".
          # We package the whole Me3_Manager_$version folder so that users won't
          # accidentally dump a bunch of loose files when they extract the zip.
          path: dist/windows-${{ env.version }}
